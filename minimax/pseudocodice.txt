
Minimax(s): # l'algoritmo prenderà tutti gli stati del gioco e calcolerà il valore di quello stato

    if Terminal(s): # se è uno stato terminale allora viene subito ritornato il valore
        return Value(s)
    
    if Player(s) == MAX: # se è il turno del giocatore MAX, il valore del gioco deve essere il più alto possibile
        # si verificano tutte le possibili azioni che possiamo fare e capire quale porterà al valore maggiore anche se il giocatore MIN sta giocando in modo ottimale
        value = -infinity # così qualsiasi azione che troviamo porterà ad un valore migliore
        for a in Actions(s): # si cicla su tutte le azioni possibili
            # per ogni azione che possiamo intraprendere, capiremo qual è lo stato del gioco risultante e poi calcoleremo il minimax di quel nuovo stato del gioco
            # se è maggiore del miglior valore che abbiamo trovato finora, diventa il nuovo valore
            value = Max(value, Minimax(Result(s, a)))
        
        # il risultato di questo ciclo è che la variabile valore sarà uguale al valore più grande che possiamo ottenere considerando tutte le azioni possibili, quindi questo è il valore che restituiremo
        return value 
    
    if Player(s) == MIN: # ora si considera la stessa situazione se è il turno del giocatore MIN
        # l'approccio è lo stesso ma vogliamo che la variabile sia la più piccola possibile
        value = infinity # si imposta la variabile al valore più alto possibile, cosìcché ogni azione individuata porterà ad un valore inferiore a quello
        for a in Actions(s):  # si cicla su tutte le azioni possibili
            # calcolando il valore minimax dello stato di gioco risultante e aggiornando il valore se è inferiore al miglior valore che abbiamo trovato finora
            value = Min(value, Minimax(Reslut(s, a)))
        
        # alla fine si ritornerà il valore
        return value 
